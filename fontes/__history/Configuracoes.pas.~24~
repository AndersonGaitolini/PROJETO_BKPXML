unit Configuracoes;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls,
  Vcl.ComCtrls,
  FireDAC.Comp.Client,
  Data.DB, Base, atributos,uDMnfebkp;

  Type
  [attTabela('configuracoes')]
  TConfiguracoes = class(TTabela)
  const
  cNomeTabela = 'configuracoes';
  private
  FId            : integer;
  FNameBD        : string;
  FPathBD        : string;
  FSenhaBD       : string;
  FUsuarioBD     : string;
  {NFe}
  FNFePathSend   : string;
  FNFePathReturn : string;
  FPathRetEnvNFe  : string;
  FPathRetCancNFe : string;
  FPathRetInutNFe : string;
  FExtAutNFe     : string;
  FExtInutNFe    : string;
  FExtCancNFe    : string;
  {NFCe}
  FNFCePathSend   : string;
  FNFCePathReturn : string;
  FPathRetEnvNFCe  : string;
  FPathRetCancNFCe : string;
  FPathRetInutNFCe : string;
  FExtAutNFCe     : string;
  FExtInutNFCe    : string;
  FExtCancNFCe    : string;
  {NFSe}
  FNFSePathSend   : string;
  FNFSePathReturn : string;
  FPathRetEnvNFSe  : string;
  FPathRetCancNFSe : string;
  FPathRetInutNFSe : string;
  FExtAutNFSe     : string;
  FExtInutNFSe    : string;
  FExtCancNFSe    : string;

  public
  [attPK]
  [TCampo('id', tcPK)]
  property Id        : integer read FId    write FId;
  property NameBD    : string read FNameBD    write FNameBD;
  property PathBD    : string read FPathBD    write FPathBD;
  property SenhaBD   : string read FSenhaBD   write FSenhaBD;
  property UsuarioBD : string read FUsuarioBD write FUsuarioBD;
  {NFe}
  property NFePathSend     : string read FNFePathSend    write FNFePathSend;
  property NFePathReturn   : string read FNFePathReturn  write FNFePathReturn;
  property PathRetEnvNFe   : string read FPathRetEnvNFe   write FPathRetEnvNFe;
  property PathRetCancNFe  : string read FPathRetCancNFe  write FPathRetCancNFe;
  property PathRetInutNFe  : string read FPathRetInutNFe  write FPathRetInutNFe;
  property ExtAutNFe       : string read FExtAutNFe      write FExtAutNFe;
  property ExtInutNFe      : string read FExtInutNFe     write FExtInutNFe;
  property ExtCancNFe      : string read FExtCancNFe     write FExtCancNFe;
  {NFCe}
  property NFCePathSend    : string read FNFCePathSend   write FNFCePathSend;
  property NFCePathReturn  : string read FNFCePathReturn write FNFCePathReturn;
  property PathRetEnvNFCe  : string read FPathRetEnvNFCe  write FPathRetEnvNFCe;
  property PathRetCancNFCe : string read FPathRetCancNFCe write FPathRetCancNFCe;
  property PathRetInutNFCe : string read FPathRetInutNFCe write FPathRetInutNFCe;
  property ExtAutNFCe      : string read FExtAutNFCe     write FExtAutNFCe;
  property ExtInutNFCe     : string read FExtInutNFCe    write FExtInutNFCe;
  property ExtCancNFCe     : string read FExtCancNFCe    write FExtCancNFCe;
  {NFSe}
  property NFSePathSend    : string read FNFSePathSend   write FNFSePathSend;
  property NFSePathReturn  : string read FNFSePathReturn write FNFSePathReturn;
  property PathRetEnvNFSe  : string read FPathRetEnvNFSe  write FPathRetEnvNFSe;
  property PathRetCancNFSe : string read FPathRetCancNFSe write FPathRetCancNFSe;
  property PathRetInutNFSe : string read FPathRetInutNFSe write FPathRetInutNFSe;
  property ExtAutNFSe      : string read FExtAutNFSe     write FExtAutNFSe;
  property ExtInutNFSe     : string read FExtInutNFSe    write FExtInutNFSe;
  property ExtCancNFSe     : string read FExtCancNFSe    write FExtCancNFSe;
  end;

 type
   TDaoConfigDFE= class(TObject)
   public
     function fInserirConfiguracoes(pTab: TConfiguracoes): Integer;
     function fSalvarConfiguracoes (pTab: TConfiguracoes): Boolean;
     function fExcluirConfiguracoes(pTab : TConfiguracoes): Boolean;
     function fBuscarConfiguracoes (pTab: TConfiguracoes): TDataSet;
     function fSelectAllConfiguracoes(pTab: TConfiguracoes): Boolean;

   private
   end;

implementation

{ TDaoLogin }
function TDaoConfigDFE.fSalvarConfiguracoes(pTab: TConfiguracoes): Boolean;
begin
  try
  Result := False;
  with DM_NFEDFE do
  begin
    Dao.StartTransaction;
    try
      Result := Dao.Salvar(pTab) > 0;
      Dao.Commit;
    except on E: Exception do
      begin
        Dao.RollBack;
        ShowMessage('Ocorreu um problema ao executar operação: ' + e.Message);
      end;
    end;
  end;
  finally
    ptab.Free;
  end;
end;

function TDaoConfigDFE.fSelectAllConfiguracoes(pTab: TConfiguracoes): Boolean;
var Registros : Integer;
    aQry : TFDQuery;
begin
  try
    DM_NFEDFE.Dao.SelectAll(pTab).
  finally

  end;
end;

function TDaoConfigDFE.fBuscarConfiguracoes(pTab: TConfiguracoes): TDataSet;
var Registros : Integer;
  wDataSet : TDataSet;
begin
  wDataSet := TDataSet.Create(nil);
  try
    Registros := DM_NFEDFE.Dao.Buscar(pTab);
    if Registros > 0 then
    begin
      Result := wDataSet;
    end
    else
    begin
      ShowMessage('Registro não encontrado!');
      Result := wDataSet;
    end;
  finally
   wDataSet.Free;
  end;
end;

function TDaoConfigDFE.fExcluirConfiguracoes(pTab: TConfiguracoes): Boolean;
begin
  try
  Result := False;
  with DM_NFEDFE do
  begin
    Dao.StartTransaction;
    try
    Result := (Dao.Excluir(pTab) > 0);
    Dao.Commit;
    except
      on E: Exception do
      begin
        if Dao.InTransaction then
          Dao.RollBack;

        ShowMessage('Ocorreu um problema ao executar operação excluir: ' + e.Message);
      end;
    end;
  end;
  finally
    ptab.Free;
  end;
end;

function TDaoConfigDFE.fInserirConfiguracoes(ptab: TConfiguracoes): Integer;
begin
  try
    Result := 0;
    with DM_NFEDFE do
     begin
       Dao.StartTransaction;
        try
          Result := Dao.Inserir(pTab);
          Dao.Commit;
        except
          on E: Exception do
          begin
            if Dao.InTransaction then
              Dao.RollBack;

            ShowMessage('Ocorreu um problema ao executar operação inserir: ' + e.Message);
          end;
        end;
     end;
  finally
    ptab.Free;
  end;

end;
end.
